#!/usr/bin/perl -Tw

use Warewulf::DB;
use Warewulf::Config;
use Warewulf::Logger;
use Warewulf::ObjectFactory;
use Getopt::Long;

&set_log_level("DEBUG");

Getopt::Long::Configure ("bundling");

my $db = Warewulf::DB->new();
my $opt_new;
my @opt_get;
my @opt_set;
my @opt_add;
my $opt_type;
my $opt_lookup = "name";

GetOptions(
    'n|new'         => \$opt_new,
    'g|get=s'       => \@opt_get,
    's|set=s'       => \@opt_set,
    'a|add=s'       => \@opt_add,
    'f|lookup=s'    => \$opt_lookup,
);

if (! @opt_get) {
    push(@opt_get, "type", "id", "name");
} else {
    @opt_get = split(",", join(",", @opt_get));
}

$opt_type = shift(@ARGV);

if ($opt_new) {

    if ($opt_type) {

        foreach my $string (@ARGV) {
            my $obj;
            $obj = Warewulf::ObjectFactory->new($opt_type);

            $obj->set($opt_lookup, $string);
            foreach my $setstring (@opt_set) {
                my ($key, $val) = split(/=/, $setstring);
                $obj->set($key, $val);
            }

            $db->persist($obj);
        }
    } else {
        eprint("You must provide a type of object to add\n");
    }

} else {
    my $objectSet;

    $objectSet = $db->get_objects($opt_type, $opt_lookup, @ARGV);
    
    if ($objectSet) {

        if (@opt_set) {

            foreach my $obj ($objectSet->get_list()) {
                foreach my $setstring (@opt_set) {
                    my ($key, $val) = split(/=/, $setstring);
                    $obj->set($key, $val);
                }
            }
            $db->persist($objectSet);

        } elsif (@opt_add) {

            foreach my $obj ($objectSet->get_list()) {
                foreach my $setstring (@opt_add) {
                    my ($key, $val) = split(/=/, $setstring);
                    $obj->add($key, $val);
                }
            }
            $db->persist($objectSet);

        } else {

            foreach my $o ($objectSet->get_list()) {
                print join(": ", map { scalar($o->get($_)) || "undefined" } @opt_get) ."\n";
            }

        }

    }
}
