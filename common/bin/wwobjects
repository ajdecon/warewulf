#!/usr/bin/perl -Tw
#
# Copyright (c) 2001-2003 Gregory M. Kurtzer
# 
# Copyright (c) 2003-2011, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#



use Warewulf::DB;
use Warewulf::Config;
use Warewulf::Logger;
use Warewulf::ObjectFactory;
use Getopt::Long;
use File::Basename;
use Data::Dumper;

my $db = Warewulf::DB->new();
my $opt_new;
my @opt_print;
my @opt_set;
my @opt_add;
my @opt_del;
my $opt_type;
my $opt_obj_delete;
my $opt_help;
my $opt_lookup = "name";
my $progname = basename($0);

&set_log_level("NOTICE");

Getopt::Long::Configure ("bundling");

GetOptions(
    'n|new'         => \$opt_new,
    'p|print=s'     => \@opt_print,
    's|set=s'       => \@opt_set,
    'a|add=s'       => \@opt_add,
    'd|del=s'       => \@opt_del,
    'l|lookup=s'    => \$opt_lookup,
    'DELETE'        => \$opt_obj_delete,
    'h|help'        => \$opt_help,
);

if (! @opt_print) {
    push(@opt_print, "name");
} else {
    @opt_print = split(",", join(",", @opt_print));
}

if ($progname eq "wwobjects") {
    $opt_type = shift(@ARGV);
    if ($opt_help) {
        print "USAGE: $0 [options] object_type [criteria...]\n\n";
    }
} else {
    if ($progname =~ /^ww(.+?)s?$/) {
        $opt_type = $1;
    }
    if ($opt_help) {
        print "USAGE: $0 [options] [criteria...]\n\n";
    }
}
if ($opt_help) {
    print "   -l, --lookup <field>     Create/query by <field> (default:  name)\n";
    print "   -n, --new                Create a new object\n";
    print "   -p, --print <field>      List of fields to print (multiple allowed)\n";
    print "   -s, --set <field>=<val>  Set fields for objects (multiple allowed)\n";
    print "   -a, --add <field>=<val>  Add/append fields for objects (multiple allowed)\n";
    print "   -d, --del <field>        Delete fields for objects (multiple allowed)\n";
    print "       --DELETE             Delete matching objects completely\n";
    print "\n";
    exit;
}


if (!$opt_type) {
    eprint("What type of object do you want?\n");
    exit;
}


if ($opt_new) {

    if ($opt_type) {

        foreach my $string (@ARGV) {
            my $obj;
            $obj = Warewulf::ObjectFactory->new($opt_type);

            $obj->set($opt_lookup, $string);
            foreach my $setstring (@opt_set) {
                my ($key, $val) = split(/=/, $setstring);
                $obj->set($key, $val);
            }

            $db->persist($obj);
        }
    } else {
        &eprint("You must provide a type of object to add\n");
    }

} else {
    my $objectSet;

    $objectSet = $db->get_objects($opt_type, $opt_lookup, @ARGV);
    
    my @objList = $objectSet->get_list();

    if (@objList) {

        if (@opt_set) {

            foreach my $obj (@objList) {
                foreach my $setstring (@opt_set) {
                    my ($key, $val) = split(/=/, $setstring);
                    $obj->set($key, split(",", $val));
                }
            }
            my $count = $db->persist($objectSet);

            print "Updated $count objects\n";

        } elsif (@opt_add) {

            foreach my $obj (@objList) {
                foreach my $setstring (@opt_add) {
                    my ($key, $val) = split(/=/, $setstring);
                    $obj->add($key, split(",", $val));
                }
            }
            my $count = $db->persist($objectSet);

            print "Updated $count objects\n";

        } elsif (@opt_del) {

            foreach my $obj (@objList) {
                foreach my $setstring (@opt_del) {
                    my ($key, $val) = split(/=/, $setstring);
                    if ($val) {
                        $obj->del($key, $val);
                    } else {
                        $obj->del($key);
                    }
                }
            }
            my $count = $db->persist($objectSet);

            print "Updated $count objects\n";

        } elsif ($opt_obj_delete) {

            my $count = $db->del_object($objectSet);

            print "Deleted $count objects\n";

        } else {

            foreach my $o ($objectSet->get_list()) {
                my @values;
                if (@opt_print and $opt_print[0] eq "all") {
                    my %hash = $o->get_hash();
                    my $id = $o->get("id");
                    foreach my $h (keys %hash) {
                        if(ref($hash{$h}) =~ /^ARRAY/) {
                            print "$id: $h=". join(",", @{$hash{$h}}) ."\n";
                        } else {
                            print "$id: $h=$hash{$h}\n";
                        }
                    }
                } else {
                    foreach my $g (@opt_print) {
                        if(ref($o->get($g)) =~ /^ARRAY/) {
                            push(@values, join(",", $o->get($g)));
                        } else {
                            push(@values, $o->get($g) || "[undef]");
                        }
                    }
                    print join(": ", @values) ."\n";
                }
            }
        }
    } else {
        &nprint("No objects found.\n");
    }
}
