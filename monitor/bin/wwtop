#!/usr/bin/perl 
# Copyright (c) 2001-2003 Gregory M. Kurtzer
#
# Copyright (c) 2003-2011, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#
#


use Warewulf::Monitor;
use strict;
use Getopt::Long;
use Term::Cap;


my $ARG_summary;
my $ARG_help;
my @nodes=();
my @nodes_ready;
my @nodes_down;
my @nodes_unavailable;
my @nodes_unknown;
my $total_cpu=0;
my $nodes_up=0;
my $nodes_down=0;
my $nodes_disabled=0;
my $nodes_unavailable=0;
my $nodes_error=0;
my %swapstat;
my $summary;

my (
   $usage,
   $help,
   $only_summary,
   $quiet,
   $entry,
   $value,
   $nodename,
   $mempercent,
   $swappercent,
   $status,
   $out,
   $total_pages,
   %nodestatus,
   %nodes,
   $string,
   $summary,
   $nodes_unknown,
   @ready,
   @unavail,
   @other,
   @error,
   @down,
   $master,
   @nodes,
   @node_config,
   @filtered,
   %node_access,
   %mastercfg,
   %swapstat,
   %config,
   @nodes_ready,
   @nodes_down,
   @nodes_shutdown,
   @nodes_unavailable,
   @nodes_unknown,
   $uptime_high,
   $uptime_low,
   $uptime_avg,
   $uptime_total,
   $load_high,
   $load_low,
   $load_avg,
   $load_total,
   $tasks_high,
   $tasks_low,
   $tasks_total,
   $tasks_avg,
   $cpu_low,
   $cpu_high,
   $cpu_avg,
   $cpu_total,
   $mem_high,
   $mem_low,
   $mem_avg,
   $mem_total,
   $cpu_mhz,
   $mem_avail,
   $mem_used,
   $l1,
   $l2,
   $l3,
   $l4,
   $l5,
   $rows,
   $key,
   $Second,
   $Minute,
   $Hour,
   $Day,
   $Month,
   $Year,
   $WeekDay,
   $DayOfYear,
   $IsDST,
   $time,
   $hostname,
   $net_h,
   $metric_sort_util,
   $show_only_idle,
   $show_only_dead,
   $show_only_utilized,
   $flush_filters,
   $reverse_sort_order,
    );




my $HEADERSIZE=4;
my $APPLICATION=2;


GetOptions(
           'help' => \$ARG_help,
	   'i'           => \$show_only_idle,
	   'd'           => \$show_only_dead,
	   'u'           => \$show_only_utilized,
);

if($ARG_help){
    print_help();
    exit;
}

my $monitor = Warewulf::Monitor->new();
$monitor->persist_socket("1");
$monitor->enable_filter("1");
my $nodeSet = $monitor->query_data();


# set the default sort mechanism
$metric_sort_util = "nodename";
	   
sub cpu_sort {
    my $node1=$a->get("NODENAME");;
    my $node2=$b->get("NODENAME");;
    if ( $metric_sort_util eq "nodename" and $reverse_sort_order ) {
	$node1 =~ /^([^\.]+)(.*)$/;
	my $a1 = $1;
	my $a2 = $2;
	$node2 =~ /^([^\.]+)(.*)$/;
	my $b1 = $1;
	my $b2 = $2;
	if ( $a2 eq $b2 ) {
	    $b1 cmp $a1;
	} else {
	    $b2 cmp $a2;
	}
    } elsif ( $metric_sort_util eq "nodename" ) {
	$node1 =~ /^([^\.]+)(.*)$/;
	my $a1 = $1;
	my $a2 = $2;
	$node2 =~ /^([^\.]+)(.*)$/;
	my $b1 = $1;
	my $b2 = $2;
	if ( $a2 eq $b2 ) {
	    $a1 cmp $b1;
	} else {
	    $a2 cmp $b2;
	}
    } elsif ( $metric_sort_util eq "cpuutil" and $reverse_sort_order ) {
	$a->get("CPUUTIL") <=> $b->get("CPUUTIL");
    } elsif ( $metric_sort_util eq "cpuutil") {
	$b->get("CPUUTIL") <=> $a->get("CPUUTIL");
    } elsif ( $metric_sort_util eq "memutil" and $reverse_sort_order ) {
	$a->get("MEMUSED") <=> $b->get("MEMUSED");
    } elsif ( $metric_sort_util eq "memutil") {
	$b->get("MEMUSED") <=> $a->get("MEMUSED");
    } elsif ( $metric_sort_util eq "swaputil" and $reverse_sort_order ) {
	$a->get("SWAPUSED") <=> $b->get("SWAPUSED");
    } elsif ( $metric_sort_util eq "swaputil") {
	$b->get("SWAPUSED") <=> $a->get("SWAPUSED");
    } elsif ( $metric_sort_util eq "uptime" and $reverse_sort_order ) {
	$a->get("UPTIME") <=> $b->get("UPTIME");
    } elsif ( $metric_sort_util eq "uptime") {
	$b->get("UPTIME") <=> $a->get("UPTIME");
    } elsif ( $metric_sort_util eq "cpuclk" and $reverse_sort_order ) {
	$a->get("CPUCLOCK") <=> $b->get("CPUCLOCK");
    } elsif ( $metric_sort_util eq "cpuclk") {
	$b->get("CPUCLOCK") <=> $a->get("CPUCLOCK");
    } elsif ( $metric_sort_util eq "proc" and $reverse_sort_order ) {
	$a->get("PROCS") <=> $b->get("PROCS");
    } elsif ( $metric_sort_util eq "proc") {
	$b->get("PROCS") <=> $a->get("PROCS");
    } elsif ( $metric_sort_util eq "netutil" and $reverse_sort_order ) {
	($a->get("NETTRANSMIT") + $a->get("NETRECIEVE")) <=>
	    ($b->get("NETTRANSMIT") + $b->get("NETRECIEVE"));
    } elsif ( $metric_sort_util eq "netutil") {
	($b->get("NETTRANSMIT") + $b->get("NETRECIEVE")) <=>
	    ($a->get("NETTRANSMIT") + $a->get("NETRECIEVE"));
    } elsif ( $metric_sort_util eq "load" and $reverse_sort_order ) {
	$a->get("LOADAVG") <=> $b->get("LOADAVG");
    } elsif ( $metric_sort_util eq "load" ) {
	$b->get("LOADAVG") <=> $a->get("LOADAVG");
    }
}


our %term={};
init_term();
term_clear();
#$scr->def_key("home","\eOH");
#$scr->def_key("home","\e^[[H");
#$scr->def_key("end","\e^[[F");
#$scr->def_key("end","\eOF");


$nodes_up = $nodes_error = $nodes_disabled = $nodes_down = $nodes_unavailable = '0';

my $display_page = 1;
my $display_line = 1;


my $count=0;
while (1) {
    term_resize();
    my $rows = $term{ROWS};
    my $line=7;
    my $total_nodes = 0;
    my $nodes_shown = 0;
    my $nodes_total = 0;
    my $nodes_up = 0;
    my $nodes_down = 0;
    my $nodes_unavailable = 0;
    my $nodes_unknown = 0;
    @nodes_ready = ();
    @nodes_down = ();
    @nodes_shutdown = ();
    @nodes_unavailable = ();
    @nodes_unknown = ();
    $uptime_high = $uptime_low = $uptime_total = ();
    $load_high = $load_low = $load_total = $load_avg = ();
    $tasks_high = $tasks_low = $tasks_total = $tasks_avg = ();
    $cpu_high = $cpu_low = $cpu_total = $cpu_avg = $cpu_mhz = ();
    $mem_high = $mem_low = $mem_total = $mem_avg = $mem_used = ();
    my $ts=time();
    foreach my $node ( sort $nodeSet->get_list()) {
	my $uptime_in_sec=$node->get("UPTIME");
	$node->set("UPTIME",$uptime_in_sec/86400);
	$nodes_total++;
	$nodename = $node->get("NODENAME");
	my $lastcontact=$ts-$node->get("TIMESTAMP");
        $node->set("LASTCONTACT",$lastcontact);

	if ( $node->get("NODESTATUS") eq "SHUTDOWN" ) {
	    push(@nodes_down, $node);
	    $nodes_down++;
	} elsif ( $node->get("LASTCONTACT") <= 300 ) {
	    push(@nodes_ready, $node);
	    $total_cpu += $node->get("CPUUTIL");
	    if ( $uptime_high < $node->get("UPTIME") or ! $uptime_high ) {
		$uptime_high = $node->get("UPTIME");
	    }
	    if ( $uptime_low > $node->get("UPTIME") or ! $uptime_low ) {
		$uptime_low = $node->get("UPTIME");
	    }
	    $uptime_total += $node->get("UPTIME");
	    if ( $load_high < $node->get("LOADAVG") or ! $load_high) {
		$load_high = $node->get("LOADAVG");
	    }
	    if ( $load_low > $node->get("LOADAVG") or ! $load_low ) {
		$load_low = $node->get("LOADAVG");
	    }
	    $load_total += $node->get("LOADAVG");
	    if ( $tasks_high < $node->get("PROCS") or ! $tasks_high) {
		$tasks_high = $node->get("PROCS");
	    }
	    if ( $tasks_low > $node->get("PROCS") or ! $tasks_low ) {
		$tasks_low = $node->get("PROCS");
	    }
	    $tasks_total += $node->get("PROCS");
	    if ( $cpu_high < $node->get("CPUUTIL") or ! $cpu_high) {
		$cpu_high = $node->get("CPUUTIL");
	    }
	    if ( $cpu_low > $node->get("CPUUTIL") or ! $cpu_low ) {
		$cpu_low = $node->get("CPUUTIL");
	    }
	    if ( $mem_high < $node->get("MEMUSED") or ! $mem_high) {
		$mem_high = $node->get("MEMUSED");
	    }
	    if ( $mem_low > $node->get("MEMUSED") or ! $mem_low) {
		$mem_low = $node->get("MEMUSED");
	    }
	    $cpu_total += $node->get("CPUCOUNT");
	    $cpu_mhz += $node->get("CPUCLOCK");
	    $mem_total += $node->get("MEMTOTAL");
	    $mem_avail += $node->get("MEMTOTAL") - $node->get("MEMUSED");
	    $mem_used += $node->get("MEMUSED");
	    $cpu_avg += $node->get("CPUUTIL");
	    $nodes_up++;
	} else {
	    push(@nodes_down, $node);
	    $nodes_down++;
	}
    }
    if ( $nodes_up ) {
	$uptime_avg = sprintf("%d", $uptime_total / $nodes_up );
	$tasks_avg = sprintf("%d", $tasks_total / $nodes_up );
	$load_avg = sprintf("%.2f", $load_total / $nodes_up );
	$mem_avg = sprintf("%d", $mem_used / $nodes_up );
	$cpu_avg = sprintf("%d", $cpu_avg / $nodes_up );
    }
    
    ($Second, $Minute, $Hour, $Day, $Month, $Year, $WeekDay, $DayOfYear, $IsDST) = localtime(time);
    $l1 = sprintf("Cluster totals: %0d nodes, %0d cpus, %0d MHz, %0.2f GB mem",
		  $nodes_up,
		  $cpu_total,
		  $cpu_mhz,
		  $mem_total / 1024,
		  );
    
    $l2 = sprintf("Avg:  %3d%s cputil, %6.2f MB memutil, load %0.2f, %3d procs, uptime %3d day(s)",
		  $cpu_avg, "%",
		  $mem_avg,
		  $load_avg,
		  $tasks_avg,
		  $uptime_avg,
		  );
    
    $l3 = sprintf("High: %3d%s cputil, %6.2f MB memutil, load %0.2f, %3d procs, uptime %3d day(s)",
		  $cpu_high, "%",
		  $mem_high,
		  $load_high,
		  $tasks_high,
		  $uptime_high,
		  );
    
    $l4 = sprintf("Low:  %3d%s cputil, %6.2f MB memutil, load %0.2f, %3d procs, uptime %3d day(s)",
		  $cpu_low, "%",
		  $mem_low,
		  $load_low,
		  $tasks_low,
		  $uptime_low,
		  );
    
    $l5 = sprintf("Node status: %4d ready, %4d unavailable, %4d down, %4d unknown",
		  $nodes_up,
		  $nodes_unavailable,
		  $nodes_down,
		  $nodes_unknown);

    term_goto_row(0);
    term_clr_eol();
    print $l1;
    term_goto_row(1);
    term_clr_eol();
    print $l2;
    term_goto_row(2);
    term_clr_eol();
    print $l3;
    term_goto_row(3);
    term_clr_eol();
    print $l4;
    term_goto_row(4);
    term_clr_eol();
    print $l5;
    
    term_goto_row(6);
    term_clr_eol();
    term_reverse();
   if ( $metric_sort_util eq "nodename" ) {
       term_bold();
       print "Node name";
       term_normal();
       term_reverse();
   } else {
       print "Node name";
   }
   if ( $metric_sort_util eq "cpuutil" ) {
       term_bold();
       print "    CPU";
       term_normal();
       term_reverse();
   } else {
       print "    CPU";
   }
   if ( $metric_sort_util eq "memutil" ) {
       term_bold();
       print "  MEM";
       term_normal();
       term_reverse();
   } else {
       print "  MEM";
   }
   if ( $metric_sort_util eq "swaputil" ) {
       term_bold();
       print " SWAP";
       term_normal();
       term_reverse();
   } else {
       print " SWAP";
   }
   if ( $metric_sort_util eq "uptime" ) {
       term_bold();
       print " Uptime";
       term_normal();
       term_reverse();
   } else {
       print " Uptime";
   }
   if ( $metric_sort_util eq "cpuclk" ) {
       term_bold();
       print "   MHz  ";
       term_normal();
       term_reverse();
   } else {
       print "   MHz  ";
   }
   if ( $metric_sort_util eq "arch" ) {
       term_bold();
       print "  Arch";
       term_normal();
       term_reverse();
   } else {
       print "  Arch";
   }
   if ( $metric_sort_util eq "proc" ) {
       term_bold();
       print " Procs ";
       term_normal();
       term_reverse();
   } else {
       print " Procs ";
   }
   if ( $metric_sort_util eq "load" ) {
       term_bold();
       print " Load ";
       term_normal();
       term_reverse();
   } else {
       print " Load ";
   }
   if ( $metric_sort_util eq "netutil" ) {
       term_bold();
       print " Net:KB/s";
       term_normal();
       term_reverse();
   } else {
       print " Net:KB/s";
   }
   if ( $show_only_idle or $show_only_utilized or $show_only_dead ) {
       term_bold();
       print " Stat/Util";
       term_normal();
       term_reverse();
   } else {
       print " Stat/Util";
   }
    term_normal();


   #$total_pages = int((@nodes_ready+@nodes_down)/($rows-6))+1;
   $display_line = 1;

   if ( $show_only_dead ) {
      @nodes_ready = ();
   }

   foreach my $node ( sort cpu_sort sort @nodes_ready ) {
      if ( $show_only_idle and ( $node->get("CPUUTIL") > '4' or $node->get("USERPROC") != 0 ) ) {
         next;
      }
      if ( $show_only_utilized and $node->get("CPUUTIL") <= '17' ) {
         next;
      }

      $total_nodes++;

      if ( $display_line < ($display_page-1)*($rows-6) ) {
         $display_line++;
         next;
      }
      if ( $nodes_shown + 6 >= $rows ) {
          next;
      }
      if ( $node->get("MEMTOTAL") > 0 ) {
         $mempercent = sprintf("%3d", $node->get("MEMUSED") / $node->get("MEMTOTAL")*100);
      } else {
         # This should really never happen... If it does, one would
         # think that the node is hosed or something else funky is going
         # on. Well, just in case...
         $mempercent = 0;
      }      
      if ( $node->get("SWAPTOTAL") > 0 ) {
         $swappercent = sprintf("%3d", $node->get("SWAPUSED") / $node->get("SWAPTOTAL")*100);
      } else {
         $swappercent = 0;
      }
      if ( $node->get("CPUUTIL") > '95' or 
           $mempercent > '95' or 
           $node->get("LOADAVG") > $node->get("CPUCOUNT") * 2 ) {
	  term_bold();
      }
      if ( $node->get("CPUUTIL") <= '4' and $node->get("USERPROC") == 0 ) {
         $status = "|  IDLE  |";
      } elsif ( $node->get("CPUUTIL") <= '4' and ! $node->get("USERPROC") ) {
         $status = "|  IDLE  |";
      } elsif ( $node->get("CPUUTIL") > '95' ) {
         $status = "|=======>|";
      } elsif ( $node->get("CPUUTIL") > '82' ) {
         $status = "|======> |";
      } elsif ( $node->get("CPUUTIL") > '69' ) {
         $status = "|=====>  |";
      } elsif ( $node->get("CPUUTIL") > '56' ) {
         $status = "|====>   |";
      } elsif ( $node->get("CPUUTIL") > '43' ) {
         $status = "|===>    |";
      } elsif ( $node->get("CPUUTIL") > '30' ) {
         $status = "|==>     |";
      } elsif ( $node->get("CPUUTIL") > '17' ) {
         $status = "|=>      |";
      } elsif ( $node->get("CPUUTIL") > '4' ) {
         $status = "|>       |";
      } else {
         $status = "|        |";
      }
      if ( $node->get("NODESTATUS") eq 'SHUTDOWN' ) {
         $status = "|SHUTDOWN|";
      }

      $nodes_shown++;
      $net_h = $node->get("NETTRANSMIT") + $node->get("NETRECIEVE");
      $net_h =~ s/(\d)(\d\d\d)$/$1,$2/g;
      $out = sprintf("%-11.11s %4s %4s %4s %6.6s %5.5s %7.7s %4.4s %6.6s %9.9s %10.10s",
           $node->get("NODENAME"), 
           $node->get("CPUUTIL"), 
           "$mempercent%", 
           "$swappercent%", 
           $node->get("UPTIME"), 
           $node->get("CPUCLOCK"), 
           $node->get("MACHINE"), 
           $node->get("PROCS"), 
           $node->get("LOADAVG"), 
           $net_h,
           $status);
      term_goto_row($line);
      term_clr_eol();
      print "$out";
      term_normal();
      $line++;
   
   }

   foreach my $node ( sort cpu_sort sort @nodes_down) {

      $total_nodes++;

      if ( $display_line < ($display_page-1)*($rows-6) ) {
         $display_line++;
         next;
      }

      if ( $nodes_shown + 6 >= $rows ) {
          next;
      }
      $nodes_shown++;
      $out = sprintf("%-11.11s %4s %4s %4s %6.6s %5.5s %7.7s %4.4s %6.6s %9.9s |%8.8s|",
                               		     $node->get("NODENAME"), "----", "----", "----", "------", "-----", "-------", "----", "------", "-------", $node->get("NODESTATUS"));
      term_goto_row($line);
      term_clr_eol();
      print "$out";
      $line++;
   }

   $total_pages = int($total_nodes/($rows-6))+1;

   $time = sprintf("%02d:%02d:%02d", $Hour,$Minute,$Second);
    
    $hostname = `hostname`;
    $hostname = substr($hostname,0,-1);
    term_goto_row(5);
    term_clr_eol();
    print "$time ";
    print "$hostname> ";


   if ( term_key_pressed(1) ) {
      $key = term_getch();
      if ( $key eq 'q' ) {
         term_goto_row(5);
         term_clr_eol();
         term_bold();
         print "Quitting!";
         term_normal();
         term_goto_row($rows);
         print "\n";
	 kill_term();
         exit;
      } elsif ( $key eq 's' ) {
         $display_page = 1;
         term_goto_row(5);
         term_clr_eol();
         term_bold();
         if ( $metric_sort_util eq "nodename" ) {
            $metric_sort_util = "cpuutil";
         } elsif ( $metric_sort_util eq "cpuutil") {
            $metric_sort_util = "memutil";
         } elsif ( $metric_sort_util eq "memutil") {
            $metric_sort_util = "swaputil";
         } elsif ( $metric_sort_util eq "swaputil") {
            $metric_sort_util = "uptime";
         } elsif ( $metric_sort_util eq "uptime") {
            $metric_sort_util = "cpuclk"
         } elsif ( $metric_sort_util eq "cpuclk") {
            $metric_sort_util = "arch";
         } elsif ( $metric_sort_util eq "arch") {
            $metric_sort_util = "proc";
         } elsif ( $metric_sort_util eq "proc") {
            $metric_sort_util = "load";
         } elsif ( $metric_sort_util eq "load") {
            $metric_sort_util = "netutil";
         } elsif ( $metric_sort_util eq "netutil") {
            $metric_sort_util = "nodename";
         }
         term_normal();
         term_goto_row($rows);
      } elsif ( $key eq 'i' ) {
         $display_page = 1;
         term_goto_row(5);
         term_clr_eol();
         term_bold();
         if ( $show_only_idle == 0 ) {
            print "Displaying idle nodes only...";
            $show_only_idle = '1';
         } else {
            print "Redisplaying nodes that are not idle...";
            $show_only_idle = '0';
         }
         sleep 1;
         term_normal();
         term_goto_row($rows);
         term_clear();
         term_resize();
         $rows = $term{ROWS};
      } elsif ( $key eq 'u' ) {
         $display_page = 1;
         term_goto_row(5);
         term_clr_eol();
         term_bold();
         if ( $show_only_utilized == 0 ) {
            print "Displaying utilized nodes only...";
            $show_only_utilized = '1';
         } else {
            print "Redisplaying nodes that are not utilized...";
            $show_only_utilized = '0';
         }
         sleep 1;
         term_normal();
         term_goto_row($rows);
         term_clear();
         term_resize();
         $rows = $term{ROWS};
      } elsif ( $key eq 'd' ) {
         $display_page = 1;
         term_goto_row(5);
         term_clr_eol();
         term_bold();
         if ( $show_only_dead == 0 ) {
            print "Displaying dead/problem nodes only...";
            $show_only_dead = '1';
         } else {
            print "Redisplaying nodes that are not dead/problem...";
            $show_only_dead = '0';
         }
         sleep 1;
         term_normal();
         term_goto_row($rows);
         term_clear();
         term_resize();
         $rows = $term{ROWS};
      } elsif ( $key eq 'r' ) {
         $display_page = 1;
         term_goto_row(5);
         term_clr_eol();
         term_bold();
         if ( ! $reverse_sort_order ) {
            print "Reversing sort order...";
            $reverse_sort_order = '1';
         } else {
            print "Unreversing sort order...";
            $reverse_sort_order = ();
         }
         sleep 1;
         term_normal();
         term_goto_row($rows);
         term_clear();
         term_resize();
         $rows = $term{ROWS};
      } elsif ( $key eq 'f' ) {
         $display_page = 1;
         term_goto_row(5);
         term_clr_eol();
         term_bold();
         print "Flushing current filters...";
         sleep 1;
         term_normal();
         term_goto_row($rows);
         $show_only_dead = '0';
         $show_only_idle = '0';
         $show_only_utilized = '0';
         $metric_sort_util = "nodename";
         $reverse_sort_order = ();
         term_clear();
         term_resize();
         $rows = $term{ROWS};
      } elsif ( $key eq 'c' ) {
         $display_page = 1;
         term_clear();
         term_resize();
         $rows = $term{ROWS};
      } elsif ( $key eq 'p' ) {
         $display_page = 1;
         term_goto_row(5);
         term_clr_eol();
         term_bold();
         print "Press any key to unpause";
         term_normal();
	 term_key_pressed();
      } elsif ( $key eq "pgdn" || $key eq "pgup" || $key eq "home" || $key eq "end" ) {
         if ( $key eq "home" ) {
            $display_page = 1;
         }
         if ( $key eq "end" ) {
            $display_page = $total_pages;
         }
         if ( $key eq "pgdn" and $display_page < $total_pages ) {
           $display_page++;
         }
         if ( $key eq "pgup" and $display_page > 1 ) {
           $display_page--;
         }
         term_normal();
         term_goto_row($rows);
         term_clear();
         term_resize();
         $rows = $term{ROWS};
      } else {
         term_goto_row(5);
         term_clr_eol();
         term_bold();
         print "Unknown key '$key' pressed...";
         term_normal();
         sleep 1;
      }
   }
   $nodeSet = $monitor->query_data();
}



sub init_term{
    my $ospeed = system('stty speed');
    $term{THIS}=Tgetent Term::Cap { 'TERM' => '', 'OSPEED' => $ospeed };
    $term{ROWS}=0;
    $term{COLS}=0;
    term_goto_row(0);
    $| = 1;
    system('stty raw -echo');
}

sub kill_term{
    system('stty -raw echo');
}

sub term_goto_row{
    my ($row) = @_;
    term_goto_xy(0,$row);
}

sub term_goto_xy{
    my ($x,$y) = @_;
    $term{THIS}->Tgoto( 'cm', $x, $y, *STDOUT );
}

sub term_clear{
    $term{THIS}->Tputs( 'cl', 1, *STDOUT );
}

sub term_resize{
    my $rows;
    my $cols;
    my $sttySize = `stty size`;    
    if ( $sttySize =~ /^\s*(\d+)\s+(\d+)\s*/ ){
	$rows = $1;
	$cols = $2;
    }
    $term{ROWS} = $rows;
    $term{COLS} = $cols;
}

sub term_clr_eol{
    if (exists($term{THIS}->{'_ce'})){
	$term{THIS}->Tputs('ce',1,*STDOUT);
    }
}

sub term_reverse{
    $term{THIS}->Tputs( 'mr', 1, *STDOUT );
}

sub term_bold{
    $term{THIS}->Tputs( 'md', 1, *STDOUT );
}

sub term_normal{
    $term{THIS}->Tputs( 'me', 1, *STDOUT );
}

sub term_key_pressed{
    my $seconds  = @_;
    my $rin = '';
    vec($rin,fileno(STDIN),1) = 1;
    if ( !defined $seconds ){
	return select($rin, undef, undef, undef);
    }else{
	return select($rin, undef, undef, $seconds);
    }
}

sub term_getch(){
    my $c = '';
    $c = getc(STDIN);
    return $c;
}

sub define_key{
    
}

sub print_help {
    print "                                                                                                       
NAME                                                                                                              
       wwtop - warewulf 'top' utility to monitor nodes
                                                                                                                  
SYNOPSIS                                                                                                          
       wwtop -help [-h]                                                                                         
                                                                                                                  
DESCRIPTION                                                                                                       
       wwtop is the Warewulf 'top' like monitor. It shows the nodes 
       ordered by the highest utilization, and important statics about 
       each node and general summary type data. This is an interactive 
       curses based tool.                                                 

    Runtime Options:                                                                                                       
       Filters (can also be used as command line options):                                                                  
          i   Display only idle nodes                                                                                       
          d   Display only dead and non 'Ready' nodes                                                                       
          f   Flush any current filters                                                                                     
       Commands:                                                                                                            
          s   Sort by: nodename, CPU, memory, network utilization                                                           
          r   Reverse the sort order                                                                                        
          p   Pause the display                                                                                             
          q   Quit                                                                                                          
       Views:                                                                                                               
          You can use the page up, page down, home and end keys to scroll 
          through multiple pages.                                                                                                   

    This tool is part of the Warewulf cluster distribution                                                                 
    http://warewulf-cluster.org/                                                                                        

\n";
}


