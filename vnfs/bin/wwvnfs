#!/usr/bin/perl -Tw
#
# Copyright (c) 2001-2003 Gregory M. Kurtzer
#
# Copyright (c) 2003-2011, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#

use Warewulf::Util;
use Warewulf::Logger;
use Warewulf::Config;
use File::Path;
use File::Basename;
use Getopt::Long;
use Cwd;

my $config = Warewulf::Config->new("vnfs.conf");
my $randstring = &rand_string("12");
my $output = "/tmp/$randstring.vnfs";
my $command = "$0 ". join(" ", @ARGV);
my $opt_output;
my $opt_chroot;
my $opt_help;
my $opt_debug;
my $opt_verbose;
my $opt_quiet;
my $opt_name;
my @opt_excludes;
my $opt_excludefile;
my $opt_includefile;
my $opt_hybrid;
my $opt_yes;
my @exclude_files;
my $wwsh_bin;

Getopt::Long::Configure ("bundling");

if (! @ARGV) {
    $opt_help = 1;
}

GetOptions(
    'h|help'        => \$opt_help,
    'debug'         => \$opt_debug,
    'verbose'       => \$opt_verbose,
    'quiet'         => \$opt_quiet,
    'c|chroot=s'    => \$opt_chroot,
    'r|root=s'      => \$opt_chroot,
    'o|output=s'    => \$opt_output,
    'e|excludes=s'  => \@opt_excludes,
    'excludefile=s' => \$opt_excludefile,
    'includefile=s' => \$opt_includefile,
    'hybridpath=s'  => \$opt_hybrid,
    'y|yes'         => \$opt_yes
);

&set_log_level("NOTICE");

if ($opt_debug) {
    &set_log_level("DEBUG");
} elsif ($opt_verbose) {
    &set_log_level("INFO");
} elsif ($opt_quiet) {
    &set_log_level("WARNING");
}

if ($opt_help) {
    print "USAGE: $0 [options] (name)\n";
    print "\nOPTIONS:\n\n";
    print "   -c, --chroot      Path to the chroot to use for this VNFS image\n";
    print "   -r, --root        Alias for --chroot\n";
    print "   -h, --help        Usage and help summary\n";
    print "   -o, --output      Output the binary VNFS to a file instead of importing it\n";
    print "                     directly into Warewulf\n";
    print "   -e, --excludes    Exclude a file or directory from the VNFS image\n";
    print "       --excludefile Path to a file that contains a list of files and directories to\n";
    print "                     exclude from the VNFS image\n";
    print "       --hybridpath  Path to use within the VNFS where the links will be pointed to in\n";
    print "                     the final image (this needs to be added to the VNFS fstab!)\n";
    print "   -y, --yes         Skips yes/no prompt if you're importing into an existing VNFS\n";
    print "\nNOTES:\n\n";
    print "   When wwvnfs is run for the first time on a VNFS, it will attempt to create a\n";
    print "   configuration file in the default warewulf config dir (/etc/warewulf/vnfs/) or in\n";
    print "   the users ~/.warewulf/vnfs directory. Once the configuration file has been written\n";
    print "   and updated, you can simply run 'wwvnfs [vnfs_name]' to rebuild the image. You can\n";
    print "   temporarily override any of these options via command line arguments.\n";
    print "\nEXAMPLES:\n\n";
    print "   # wwvnfs --chroot=/var/chroots/rhel-6\n";
    print "   # wwvnfs custom_name --chroot=/var/chroots/rhel-6 --hybridpath=/hybrid/vnfs_name\n";
    print "   # wwvnfs --chroot=/var/chroots/rhel-6 --output=rhel-6.vnfs\n";
    print "   # wwvnfs custom_name\n";
    print "\n";
    exit 1;
}

$opt_name = shift(@ARGV);

@opt_excludes = split(",", join(",", @opt_excludes));


if (! $opt_name and $opt_chroot) {
    $opt_name = basename($opt_chroot);
    &nprint("Using '$opt_name' as the VNFS name\n");
}

if ($opt_name and $opt_name =~ /^([a-zA-Z0-9\-_\.]+)$/) {
    $opt_name = $1;
    if (! $config->load("vnfs/$opt_name.conf")) {
        my $config_path;
        my $config_fh;
        mkpath("/etc/warewulf/vnfs");
        if (open($config_fh, "> /etc/warewulf/vnfs/$opt_name.conf")) {
            $config_path = "/etc/warewulf/vnfs/$opt_name.conf";
        } else {
            &wprint("Could not create /etc/warewulf/vnfs/$opt_name.conf\n");
            if ($ENV{"HOME"} =~ /^([a-zA-Z0-9\/\.\-_]+)$/) {
                mkpath("$1/.warewulf/vnfs");
                if (open($config_fh, "> $1/.warewulf/vnfs/$opt_name.conf")) {
                    $config_path = "$1/.warewulf/vnfs/$opt_name.conf";
                } else {
                    &wprint("Could not create $1/.warewulf/vnfs/$opt_name.conf\n");
                }
            }
        }

        if ($config_fh) {
            my $ecount = 0;
            print $config_fh "# Configuration file for '$opt_name' automatically generated by command:\n";
            print $config_fh "# $command\n\n";
            print $config_fh "# Any command line options will override these on a case by case basis.\n";

            print $config_fh "# The location of the template chroot. This needs to be set here or via --chroot.\n";
            if ($opt_chroot) {
                print $config_fh "chroot = $opt_chroot\n\n";
            } else {
                print $config_fh "# chroot = /path/to/chroot\n\n";
            }
            
            print $config_fh "# If this is defined, the VNFS will be written here instead of imported into\n";
            print $config_fh "# Warewulf automatically\n";
            if ($opt_output) {
                print $config_fh "output = $opt_output\n\n";
            } else {
                print $config_fh "# output = /tmp/$opt_name.vnfs\n\n";
            }

            print $config_fh "# If you use this option, you should make sure that the path defined is\n";
            print $config_fh "# mounted via the VNFS's fstab\n";
            if ($opt_hybrid) {
                $opt_hybrid =~ s/\%\{name\}/$opt_name/g;
                print $config_fh "hybridpath = $opt_hybrid\n\n";
            } else {
                print $config_fh "# hybridpath = /hybrid/$opt_name\n\n";
            }

            print $config_fh "# Location of a single file that lists all files to be excluded from the VNFS\n";
            if ($opt_excludefile) {
                print $config_fh "excludefile = $opt_excludefile\n\n";
            } else {
                print $config_fh "# excludefile = /etc/warewulf/shared-excludes\n\n";
            }

            print $config_fh "# The list of all excluded files and paths from the VNFS\n";
            foreach my $exclude (@opt_excludes) {
                if ($ecount == 0) {
                    print $config_fh "excludes = $exclude\n";
                } else {
                    print $config_fh "excludes += $exclude\n";
                }
                $ecount++;
            }
            if ($ecount == 0) {
                print $config_fh "# excludes = /exclude/path1\n";
                print $config_fh "# excludes += /exclude/path2\n";
            }

            if (close $config_fh) {
                &nprint("Wrote a new configuration file at: $config_path\n");
            }
        }
    }
} elsif ($opt_name) {
    &eprint("VNFS name contains illegal characters!\n");
    exit 1;
} else {
    &eprint("What is the name of this VNFS?!\n");
    exit 1;
}

if (! $opt_chroot) {
    $opt_chroot = $config->get("chroot");
}
if (! $opt_output) {
    $opt_output = $config->get("output");
}
if (! $opt_excludefile) {
    $opt_excludefile = $config->get("excludefile");
}
if (! $opt_hybrid) {
    $opt_hybrid = $config->get("hybridpath");
}
if (! $opt_includefile) {
    $opt_includefile = $config->get("includefile");
}
push(@exclude_files, $config->get("excludes"));



if ($opt_chroot and $opt_chroot =~ /^([a-zA-Z0-9\/\.\-_]+)$/) {
    $opt_chroot = $1;
} elsif ($opt_chroot) {
    &eprint("Chroot path contains illegal characters!\n");
    exit 1;
} else {
    &eprint("The path to the template chroot is not given!\n");
    exit 1;
}

if ($opt_hybrid) {
    $opt_hybrid =~ s/\%\{name\}/$opt_name/g;

    my $hybrid_good;
    if (open(FSTAB, "$opt_chroot/etc/fstab")) {
        while (my $line = <FSTAB>) {
            chomp($line);
            if ($line =~ /^\s*\S+\s+(\/\S+)\s+.+/) {
                if ($opt_hybrid eq $1) {
                    $hybrid_good = 1;
                }
            }
        }
        close FSTAB;
    }
    if (! $hybrid_good) {
        &wprint("Hybridpath defined, but not configured in the VNFS /etc/fstab!\n");
    }
}

if ($opt_hybrid and $opt_hybrid =~ /^([a-zA-Z0-9\-_\/:\.]+)$/) {
    $opt_hybrid = $1;
} elsif ($opt_hybrid) {
    &eprint("Illegal characters in --hybridpath option: $opt_hybrid\n");
    exit 1;
}

if ($opt_output and $opt_output =~ /^([a-zA-Z0-9\-_\/:\.]+)$/) {
    $opt_output = $1;
}

foreach my $dir (split(":", $ENV{"PATH"})) {
    if ($dir =~ /^([a-zA-Z0-9_\-\.\/]+)$/) {
        if (-x "$1/wwsh") {
            $wwsh_bin = "$1/wwsh";
            last;
        }
    }
}

&dprint("Sanitizing the PATH environment variable\n");
$ENV{"PATH"} = "/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin";

&dprint("Starting main conditional\n");
if (-d $opt_chroot) {
    &dprint("Looking for init at: $opt_chroot/sbin/init\n");
    if (-x "$opt_chroot/sbin/init") {
        &dprint("Checking to see if the target is a VNFS file\n");
        my $dirname = dirname($output);
        if (! -d $dirname) {
            &iprint("Creating target VNFS parent directory\n");
            mkpath($dirname);
        }

        &nprint("Creating VNFS image for $opt_name\n");

        if ($opt_excludefile and $opt_excludefile =~ /^([a-zA-Z0-9_\-\.\/]+)$/ ) {
            open(EXCLUDES, $1);
            while(my $line = <EXCLUDES>) {
                chomp($line);
                push(@exclude_files, $line);
            }
        } elsif ($opt_excludefile) {
            &eprint("Exclude file contains illegal characters!\n");
            exit 1;
        }

        if (@exclude_files) {
            &nprint("Building template VNFS image\n");
            my $tmpdir = "/var/tmp/wwvnfs.". &rand_string(16);
            mkpath($tmpdir);
            &iprint("Creating temporary chroot at: $tmpdir\n");
            system("cd $opt_chroot; cp -ax . $tmpdir");
            &nprint("Excluding files from VNFS\n");
            foreach my $line (@exclude_files) {
                if ($line =~ /^\/(.*)$/) {
                    foreach my $file (glob("$line")) {
                        if ($file =~ /^([a-zA-Z0-9_\-\/\.]+?)\/?$/) {
                            $file = $1;
                            if (-e $file) {
                                &dprint("Excluding from VNFS: $tmpdir$file\n");
                                system("rm -rf $tmpdir$file");
                                if ($opt_hybrid) {
                                    &iprint("Hybridizing location in VNFS: $file\n");
                                    system("ln -s $opt_hybrid/$file $tmpdir/$file");
                                }
                            } else {
                                &iprint("Skipping non-existent file to exclude/hybridize: $file\n");
                            }
                        }
                    }
                }
            }
            &nprint("Building and compressing the final image\n");
            system("(cd $tmpdir; find . | cpio --quiet -o -H newc ) | gzip -9 > $output");
            &nprint("Cleaning temporary files\n");
            system("rm -rf $tmpdir");
        } elsif ($opt_includefile) {
            if ($opt_includefile =~ /^([a-zA-Z0-9_\-\.\/]+)$/ ) {
                $opt_includefile = $1;

            } else {
                &eprint("Illegal characters in include file path\n");
                exit 1;
            }

        } else {
            &nprint("Building and compressing VNFS image\n");
            system("(cd $opt_chroot; find . | cpio --quiet -o -H newc ) | gzip -9 > $output");
        }

        if (-f $output) {
            if ($opt_output) {
                my $dirname = dirname($opt_output);
                if (! -d $dirname) {
                    mkpath($dirname);
                }
                &dprint("Moving $output to $opt_output\n");
                rename($output, $opt_output);
                &nprint("Wrote VNFS image to $opt_output\n");
                &nprint("Done.\n");
            } else {
                if ($opt_yes) {
                    system("yes | $wwsh_bin vnfs import $output --name=$opt_name");
                } else {
                    system("$wwsh_bin vnfs import $output --name=$opt_name");
                }
                unlink($output);
                &nprint("Done.\n");
            }
        } else {
            &eprint("There was an error creating the output file: $opt_output!\n");
        }

    } else {
        &eprint("Can not find /sbin/init in your VNFS!\n");
        exit 1;
    }
} else {
    &eprint("Path to chroot is not valid ('$opt_chroot')\n");
    exit 1;
}



