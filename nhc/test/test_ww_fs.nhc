# Tests for ww_fs.nhc
#
# $Id$
#

function populate_fs_data() {
    DF_DEV=(
        [0]="/dev/mapper/vg0-lv_root_ext4"
        [1]="proc"
        [2]="sysfs"
        [3]="/dev/sda1"
        [4]="bluearc0:/home"
        [5]="bluearc0:/software"
    )
    DF_FREE=(
        [0]="19747624"
        [1]="0"
        [2]="0"
        [3]="367968"
        [4]="10998677612"
        [5]="550155968"
    )
    DF_MNTPT=(
        [0]="/"
        [1]="/proc"
        [2]="/sys"
        [3]="/boot"
        [4]="/home"
        [5]="/global/software"
    )
    DF_PCT=(
        [0]="38%"
        [1]="-"
        [2]="-"
        [3]="22%"
        [4]="68%"
        [5]="32%"
    )
    DF_SIZE=(
        [0]="33027952"
        [1]="0"
        [2]="0"
        [3]="495844"
        [4]="36124323646"
        [5]="799277056"
    )
    DF_TYPE=(
        [0]="ext4"
        [1]="proc"
        [2]="sysfs"
        [3]="ext4"
        [4]="nfs"
        [5]="nfs"
    )
    DF_USED=(
        [0]="11602608"
        [1]="0"
        [2]="0"
        [3]="102276"
        [4]="23290830034"
        [5]="249121088"
    )
    FS_DEV=(
        [0]="rootfs"
        [1]="proc"
        [2]="sysfs"
        [3]="/dev/sda1"
        [4]="bluearc0:/home"
        [5]="bluearc0:/software"
    )
    FS_MNTPT=(
        [0]="/"
        [1]="/proc"
        [2]="/sys"
        [3]="/boot"
        [4]="/home"
        [5]="/global/software"
    )
    FS_OPTS=(
        [0]="rw"
        [1]="rw,nosuid,nodev,noexec,relatime"
        [2]="rw,seclabel,nosuid,nodev,noexec,relatime"
        [3]="rw,seclabel,relatime,barrier=1,data=ordered"
        [4]="rw,relatime,vers=3,hard,proto=tcp,timeo=600,retrans=2,sec=sys"
        [5]="ro,relatime,vers=3,hard,proto=tcp,timeo=600,retrans=2,sec=sys"
    )
    FS_TYPE=(
        [0]="rootfs"
        [1]="proc"
        [2]="sysfs"
        [3]="ext4"
        [4]="nfs"
        [5]="nfs"
    )
}

plan $((8+5+5+5+3+6+8+9+6+6)) "ww_fs.nhc" && {
    is "`type -t check_fs_mount 2>&1`" 'function' 'check_fs_mount() loaded properly'
    is "`type -t check_fs_mount_rw 2>&1`" 'function' 'check_fs_mount_rw() loaded properly'
    is "`type -t check_fs_mount_ro 2>&1`" 'function' 'check_fs_mount_ro() loaded properly'
    is "`type -t nhc_fs_parse_size 2>&1`" 'function' 'check_fs_size() loaded properly'
    is "`type -t nhc_fs_unparse_size 2>&1`" 'function' 'check_fs_size() loaded properly'
    is "`type -t check_fs_size 2>&1`" 'function' 'check_fs_size() loaded properly'
    is "`type -t check_fs_free 2>&1`" 'function' 'check_fs_free() loaded properly'
    is "`type -t check_fs_used 2>&1`" 'function' 'check_fs_used() loaded properly'

    populate_fs_data

    check_fs_mount /
    is $? 0 "check_fs_mount() for /"
    check_fs_mount / "" "" ""
    is $? 0 "check_fs_mount() for / (blank args)"
    check_fs_mount /FAKE/filesystem/NAME
    is $? 1 "check_fs_mount() for bogus filesystem"
    check_fs_mount /FAKE/filesystem/NAME "" "" ""
    is $? 1 "check_fs_mount() for bogus filesystem (blank args)"

    check_fs_mount /proc "" proc
    is $? 0 "check_fs_mount() for /proc, type only (empty 2nd argument)"

    check_fs_mount_ro /global/software
    is $? 0 "check_fs_mount_ro(), single argument (known good)"
    check_fs_mount_ro /global/software bluearc0:/software
    is $? 0 "check_fs_mount_ro(), two arguments (known good)"
    check_fs_mount_ro /global/software bluearc0:/software nfs
    is $? 0 "check_fs_mount_ro(), three arguments (known good)"
    check_fs_mount_ro /global/software master:/global/software nfs
    is $? 1 "check_fs_mount_ro(), three arguments (2nd bad)"
    check_fs_mount_ro /global/software bluearc0:/software nfs4
    is $? 1 "check_fs_mount_ro(), three arguments (3rd bad)"

    check_fs_mount_rw /boot
    is $? 0 "check_fs_mount_rw(), single argument (known good)"
    check_fs_mount_rw /boot /dev/sda1
    is $? 0 "check_fs_mount_rw(), two arguments (known good)"
    check_fs_mount_rw /boot /dev/sda1 ext4
    is $? 0 "check_fs_mount_rw(), three arguments (known good)"
    check_fs_mount_rw /boot /dev/sdb3 ext4
    is $? 1 "check_fs_mount_rw(), three arguments (2nd bad)"
    check_fs_mount_rw /boot /dev/sda1 btrfs
    is $? 1 "check_fs_mount_rw(), three arguments (3rd bad)"

    check_fs_mount /home bluearc0:/home nfs
    is $? 0 "check_fs_mount() for NFS (source/type)"
    check_fs_mount /home "" "" "*,vers=3*"
    is $? 0 "check_fs_mount() for NFS version (glob)"
    check_fs_mount /home "" "" "/(^|,)vers=3(,|\$)/"
    is $? 0 "check_fs_mount() for NFS version (regex)"

    OSIZE="1023kB"
    nhc_fs_parse_size $OSIZE NSIZE
    is $NSIZE 1023 "nhc_fs_parse_size():  1023kB -> 1023"
    OSIZE="1023MB"
    nhc_fs_parse_size $OSIZE NSIZE
    is $NSIZE $((1023*1024)) "nhc_fs_parse_size():  1023MB -> $((1023*1024))"
    OSIZE="100GB"
    nhc_fs_parse_size $OSIZE NSIZE
    is $NSIZE $((100*1024*1024)) "nhc_fs_parse_size():  100GB -> $((100*1024*1024))"
    OSIZE="6Tb"
    nhc_fs_parse_size $OSIZE NSIZE
    is $NSIZE $((6*1024*1024*1024)) "nhc_fs_parse_size():  6Tb -> $((6*1024*1024*1024))"
    OSIZE="1pb"
    nhc_fs_parse_size $OSIZE NSIZE
    is $NSIZE $((1024*1024*1024*1024)) "nhc_fs_parse_size():  1pb -> $((1024*1024*1024*1024))"
    OSIZE="1eb"
    nhc_fs_parse_size $OSIZE NSIZE
    is $NSIZE $((1024*1024*1024*1024*1024)) "nhc_fs_parse_size():  1eb -> $((1024*1024*1024*1024*1024))"

    OSIZE=$((1024*1024*1024*1024*1024*1024))
    nhc_fs_unparse_size $OSIZE NSIZE
    is "$NSIZE" "1024EB" "nhc_fs_unparse_size():  $OSIZE -> 1024EB"
    OSIZE=$((1024*1024*1024*1024*1024))
    nhc_fs_unparse_size $OSIZE NSIZE
    is "$NSIZE" "1EB" "nhc_fs_unparse_size():  $OSIZE -> 1EB"
    OSIZE=$((1023*1024*1024*1024*1024))
    nhc_fs_unparse_size $OSIZE NSIZE
    is "$NSIZE" "1023PB" "nhc_fs_unparse_size():  $OSIZE -> 1023PB"
    OSIZE=$((64*1024*1024*1024))
    nhc_fs_unparse_size $OSIZE NSIZE
    is "$NSIZE" "64TB" "nhc_fs_unparse_size():  $OSIZE -> 64TB"
    OSIZE=$((4*1024*1024))
    nhc_fs_unparse_size $OSIZE NSIZE
    is "$NSIZE" "4GB" "nhc_fs_unparse_size():  $OSIZE -> 4GB"
    OSIZE=$((1023*1024))
    nhc_fs_unparse_size $OSIZE NSIZE
    is "$NSIZE" "1023MB" "nhc_fs_unparse_size():  $OSIZE -> 1023MB"
    OSIZE=$((1024))
    nhc_fs_unparse_size $OSIZE NSIZE
    is "$NSIZE" "1MB" "nhc_fs_unparse_size():  $OSIZE -> 1MB"
    OSIZE=$((1000))
    nhc_fs_unparse_size $OSIZE NSIZE
    is "$NSIZE" "1000kB" "nhc_fs_unparse_size():  $OSIZE -> 1000kB"

    check_fs_size /boot 100M 1G
    is $? 0 "check_fs_size() - /boot is between 100M and 1G"
    check_fs_size /boot 1 2k
    is $? 1 "check_fs_size() - /boot is not between 1kB and 2kB"
    check_fs_size /boot 1G 2G
    is $? 1 "check_fs_size() - /boot is not between 1G and 2G"
    check_fs_size /boot 1kB
    is $? 0 "check_fs_size() - /boot 1kB minimum, no maximum"
    check_fs_size /boot 1Gb
    is $? 1 "check_fs_size() - /boot 1G minimum"
    check_fs_size /boot 495844
    is $? 0 "check_fs_size() - actual size as minimum passes"
    check_fs_size /boot "" 495844k
    is $? 0 "check_fs_size() - actual size as maximum passes"
    check_fs_size /boot "" 1
    is $? 1 "check_fs_size() - 1kB max only"
    check_fs_size /boot "" 1G
    is $? 0 "check_fs_size() - 1G max only"

    check_fs_free / 1G
    is $? 0 "check_fs_free() - >1GB free on /"
    check_fs_free / 19747624
    is $? 0 "check_fs_free() - Exactly 19747624kB free on /"
    check_fs_free / 1TB
    is $? 1 "check_fs_free() - <1TB free on /"
    check_fs_free /home 10%
    is $? 0 "check_fs_free() - >10% free on /home"
    check_fs_free /home 32%
    is $? 0 "check_fs_free() - Exactly 32% free on /home"
    check_fs_free /home 90%
    is $? 1 "check_fs_free() - <90% free on /home"

    check_fs_used / 30G
    is $? 0 "check_fs_used() - <30GB used on /"
    check_fs_used / 11602608
    is $? 1 "check_fs_used() - Exactly 11602608kB used on /"
    check_fs_used / 1GB
    is $? 1 "check_fs_used() - >1GB used on /"
    check_fs_used /home 95%
    is $? 0 "check_fs_used() - <95% used on /home"
    check_fs_used /home 68%
    is $? 1 "check_fs_used() - Exactly 68% used on /home"
    check_fs_used /home 2%
    is $? 1 "check_fs_used() - >2% used on /home"

} ; unplan
