# NHC - Warewulf Filesystem Checks
#
# Michael Jennings <mej@lbl.gov>
# 15 December 2010
#
# $Id$
#

DF_CMD="${DF_CMD:-df}"
DF_FLAGS="${DF_FLAGS:--Tka}"

FS_DEV=( )
FS_MNTPT=( )
FS_TYPE=( )
FS_OPTS=( )
DF_DEV=( )
DF_TYPE=( )
DF_SIZE=( )
DF_USED=( )
DF_FREE=( )
DF_PCT=( )
DF_MNTPT=( )

function nhc_fs_mounts_gather_data() {
    local IFS FS_CNT i
    local -a LINES FIELD

    if [[ ! -r /proc/mounts ]]; then
        return 1
    fi
    IFS=$'\n'
    LINES=( $(< /proc/mounts) )
    IFS=$' \t\n'

    ((FS_CNT=0))
    for ((i=0; i<${#LINES[*]}; i++)); do
        # Split line on whitespace to create fields.
        FIELD=( ${LINES[$i]} )

        FS_DEV[$FS_CNT]="${FIELD[0]}"
        FS_MNTPT[$FS_CNT]="${FIELD[1]}"
        FS_TYPE[$FS_CNT]="${FIELD[2]}"
        FS_OPTS[$FS_CNT]="${FIELD[3]}"
        dbg "Got filesystem ${FS_DEV[$FS_CNT]} ${FS_MNTPT[$FS_CNT]} ${FS_TYPE[$FS_CNT]} ${FS_OPTS[$FS_CNT]}"
        ((FS_CNT++))
    done
    #set | grep ^FS_ | sed 's/\[/\n        [/g;s/)$/\n)/' | sed '/\[\(3\|4\|5\|6\|7\|8\|9\|1[2-9]\|2[0-9]\)\]/d'
}

function nhc_fs_df_gather_data() {
    local IFS DF_CNT i
    local -a LINES FIELD

    IFS=$'\n'
    LINES=( $($DF_CMD $DF_FLAGS) )
    IFS=$' \t\n'

    ((DF_CNT=0))
    # Skip first line (column headers).
    for ((i=1; i<${#LINES[*]}; i++)); do
        # Split line on whitespace to create fields.
        FIELD=( ${LINES[$i]} )

        DF_DEV[$DF_CNT]="${FIELD[0]}"
        if [[ ${#FIELD[*]} -eq 1 ]]; then
            ((i++))
            FIELD=( ${FIELD[0]} ${LINES[$i]} )
        fi
        DF_TYPE[$DF_CNT]="${FIELD[1]}"
        DF_SIZE[$DF_CNT]="${FIELD[2]}"
        DF_USED[$DF_CNT]="${FIELD[3]}"
        DF_FREE[$DF_CNT]="${FIELD[4]}"
        DF_PCT[$DF_CNT]="${FIELD[5]}"
        DF_MNTPT[$DF_CNT]="${FIELD[6]}"
        dbg "Got filesystem ${DF_DEV[$DF_CNT]} ${DF_TYPE[$DF_CNT]} ${DF_SIZE[$DF_CNT]} ${DF_USED[$DF_CNT]} ${DF_FREE[$DF_CNT]} ${DF_PCT[$DF_CNT]} ${DF_MNTPT[$DF_CNT]}"
        ((DF_CNT++))
    done
    #set | grep ^DF_ | sed 's/\[/\n        [/g;s/)$/\n)/' | sed '/\[\(3\|4\|7\|8\|9\|1[0-9]\)\]/d'
}

function nhc_fs_parse_size() {
    local VAL=$1
    local VAR=$2

    if [[ -n "$VAL" ]]; then
        VAL="${VAL/%[bB]}"
        case "$VAL" in
            *k|*K)  VAL=${VAL/%[Kk]} ;;
            *m|*M)  VAL=$((${VAL/%[Mm]}*1024)) ;;
            *g|*G)  VAL=$((${VAL/%[Gg]}*1024*1024)) ;;
            *t|*T)  VAL=$((${VAL/%[Tt]}*1024*1024*1024)) ;;
            *p|*P)  VAL=$((${VAL/%[Pp]}*1024*1024*1024*1024)) ;;
            *e|*E)  VAL=$((${VAL/%[Ee]}*1024*1024*1024*1024*1024)) ;;
        esac
    fi
    if [[ -n "$VAR" ]]; then
        eval $VAR=$VAL
    fi
}

function nhc_fs_unparse_size() {
    local VAL=$1
    local VAR=$2
    local -a SUFFIXES=( k M G T P E )
    local i

    if [[ -n "$VAL" ]]; then
        for ((i=0; VAL >= 1024 && i < ${#SUFFIXES[*]}-1; i++)); do
            ((VAL/=1024))
        done
        VAL="$VAL${SUFFIXES[$i]}B"
    fi
    if [[ -n "$VAR" ]]; then
        eval $VAR='"$VAL"'
    fi
}

# Check to make sure a filesystem ($1) is mounted.  Includes optional
# checks for source ($2), filesystem type ($3), and a regular
# expression for mount options ($4).
function check_fs_mount() {
    local FS=$1
    local SRC=$2
    local TYPE=$3
    local OPTIONS=$4
    local i

    if [[ ${#FS_DEV[*]} -eq 0 ]]; then
        nhc_fs_mounts_gather_data || {
            die 1 "$FUNCNAME:  /proc/mounts unreadable"
            return 1
        }
    fi

    for ((i=0; i < ${#FS_DEV[*]}; i++)); do
        if [[ "${FS_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        if [[ "$SRC" != "" ]]; then
            if ! mcheck "${FS_DEV[$i]}" "$SRC" ; then
                die 1 "$FUNCNAME:  $FS mounted from ${FS_DEV[$i]} (should be $SRC)"
                return 1
            fi
        fi
        if [[ "$TYPE" != "" ]]; then
            if ! mcheck "${FS_TYPE[$i]}" "$TYPE" ; then
                die 1 "$FUNCNAME:  $FS has incorrect type ${FS_TYPE[$i]} (should be $TYPE)"
                return 1
            fi
        fi
        if [[ "$OPTIONS" != "" ]]; then
            if ! mcheck "${FS_OPTS[$i]}" "$OPTIONS" ; then
                die 1 "$FUNCNAME:  $FS mount options incorrect"
                return 1
            fi
        fi
        return 0
    done
    die 1 "$FUNCNAME:  $FS not mounted"
    return 1
}

# Some shortcuts that use check_fs_mount()
function check_fs_mount_rw() {
    check_fs_mount "$1" "$2" "$3" '/(^|,)rw($|,)/'
}
function check_fs_mount_ro() {
    check_fs_mount "$1" "$2" "$3" '/(^|,)ro($|,)/'
}

# Check to make sure a filesystem ($1) has between a minimum ($2) and
# a maximum ($3) amount of space (in kB).  Either may be blank.  To
# check for a specific size, pass the same value for both parameters.
function check_fs_size() {
    local FS=$1
    local MIN_SIZE=$2
    local MAX_SIZE=$3
    local FS_SIZE
    local i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    nhc_fs_parse_size "$MIN_SIZE" MIN_SIZE
    nhc_fs_parse_size "$MAX_SIZE" MAX_SIZE

    for ((i=0; i < ${#DF_DEV[*]}; i++)); do
        if [[ "${DF_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        FS_SIZE=${DF_SIZE[$i]}
        if [[ -n "$MIN_SIZE" && $MIN_SIZE -gt $FS_SIZE ]]; then
            nhc_fs_unparse_size $FS_SIZE FS_SIZE
            nhc_fs_unparse_size $MIN_SIZE MIN_SIZE
            die 1 "$FUNCNAME:  $FS size $FS_SIZE less than minimum of $MIN_SIZE"
            return 1
        fi
        if [[ -n "$MAX_SIZE" && $MAX_SIZE -lt $FS_SIZE ]]; then
            nhc_fs_unparse_size $FS_SIZE FS_SIZE
            nhc_fs_unparse_size $MAX_SIZE MAX_SIZE
            die 1 "$FUNCNAME:  $FS size $FS_SIZE exceeds maximum of $MAX_SIZE"
            return 1
        fi
        return 0
    done
    return 0
}

# Check that filesystem ($1) has at least a specified amount ($2) of
# free space.  This may be either a percentage or a size specifier.
function check_fs_free() {
    local FS=$1
    local MIN_FREE=$2
    local FS_FREE FREE_PCT i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    for ((i=0; i < ${#DF_DEV[*]}; i++)); do
        if [[ "${DF_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        if [[ -n "$MIN_FREE" ]]; then
            FREE_PCT=$((100-${DF_PCT[$i]/%%}))
            FS_FREE=${DF_FREE[$i]}
            if [[ "${MIN_FREE/%%}" != "$MIN_FREE" ]]; then
                if [[ $FREE_PCT -lt "${MIN_FREE/%%}" ]]; then
                    nhc_fs_unparse_size $FS_FREE FS_FREE
                    die 1 "$FUNCNAME:  $FS has only ${FREE_PCT}% free ($FS_FREE), minimum is $MIN_FREE"
                    return 1
                fi
            else
                nhc_fs_parse_size $MIN_FREE MIN_FREE
                if [[ $FS_FREE -lt $MIN_FREE ]]; then
                    nhc_fs_unparse_size $MIN_FREE MIN_FREE
                    nhc_fs_unparse_size $FS_FREE FS_FREE
                    die 1 "$FUNCNAME:  $FS has only $FS_FREE free, minimum is $MIN_FREE"
                    return 1
                fi
            fi
        fi
        return 0
    done
    return 0
}

# Check that filesystem ($1) has at most a specified amount ($2) of
# used space.  This may be either a percentage or a number of kB.
function check_fs_used() {
    local FS=$1
    local MAX_USED=$2
    local FS_USED i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    for ((i=0; i < ${#DF_DEV[*]}; i++)); do
        if [[ "${DF_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        if [[ -n "$MAX_USED" ]]; then
            FS_USED=${DF_USED[$i]}
            if [[ "${MAX_USED/%%}" != "$MAX_USED" ]]; then
                if [[ ${DF_PCT[$i]/%%} -ge "${MAX_USED/%%}" ]]; then
                    nhc_fs_unparse_size $FS_USED FS_USED
                    die 1 "$FUNCNAME:  $FS is ${DF_PCT[$i]/%%}% full ($FS_USED), threshold is ${MAX_USED}%"
                    return 1
                fi
            else
                nhc_fs_parse_size $MAX_USED MAX_USED
                if [[ $FS_USED -ge $MAX_USED ]]; then
                    nhc_fs_unparse_size $MAX_USED MAX_USED
                    nhc_fs_unparse_size $FS_USED FS_USED
                    die 1 "$FUNCNAME:  $FS has $FS_USED used, threshold is $MAX_USED"
                    return 1
                fi
            fi
        fi
        return 0
    done
    return 0
}
