#!/bin/bash
#
# Warewulf Node Health Check Script
#
# Michael Jennings <mej@lbl.gov>
# 13 December 2010
#
# $Id$
#

# This is the driver program for the node health check script
# subsystem.  The include directory (/etc/nhc/scripts by default)
# contains a series of bash scripts which, when sourced, should define
# bash functions which will later be invoked to check node health.
#
# The configuration file (/etc/nhc/nhc.conf by default) is then read a
# line at a time.  Any lines beginning with a mask that matches the
# current hostname will invoke the specified check (usually one of the
# bash functions loaded above, but could also be an external command
# or script).  Failure of any check will result in the node being
# flagged as "unhealthy" and the termination of further checks.

### Library functions

# Declare a print-error-and-exit function.
function die() {
    local RET=$1
    shift
    log "Health check failed:  $*"
    syslog "Health check failed:  $*"
    syslog_flush
    if [[ "$MARK_OFFLINE" = "1" ]]; then
        eval '$OFFLINE_NODE "$HOSTNAME" "$*" </dev/null >/dev/null' $LOGFILE '2>&1 &'
    fi
    echo "ERROR Health check failed:  $*"
    [[ -n "$WATCHDOG_PID" ]] && kill -9 $WATCHDOG_PID >/dev/null 2>&1
    exit $RET
}
trap 'die 128 Terminated by signal.' 1 2 15
trap 'die 127 Script timed out.' 14

# Quick-and-dirty debugging output
function dbg() {
    if [[ "$DEBUG" != "0" ]]; then
        eval echo '"DEBUG:  $*"' $LOGFILE
    fi
}

# Quick-and-dirty log output
function log() {
    if [[ "$SILENT" = "0" ]]; then
        eval echo '"$@"' $LOGFILE
    fi
}

# Store syslog output, send at end of script execution.
function syslog() {
    if [[ -z "$LOGGER_TEXT" ]]; then
        LOGGER_TEXT="$*"
    else
        LOGGER_TEXT="$LOGGER_TEXT"$'\n'"$*"
    fi
}

function syslog_flush() {
    if [[ -n "$LOGGER_TEXT" ]]; then
        echo "$LOGGER_TEXT" | logger -p daemon.err -t "$NAME[$$]"
    fi
    LOGGER_TEXT=""
}

#########################

### Variable declarations

# Static variables
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
SYSCONFIGDIR="/etc/sysconfig"
LIBEXECDIR="/usr/libexec"
read HOSTNAME < /proc/sys/kernel/hostname
HOSTNAME_S=${HOSTNAME/%.*}
RET=0
LOGGER_TEXT=""
NHC_PID=$$
WATCHDOG_PID=0
export PATH SYSCONFIGDIR LIBEXECDIR HOSTNAME HOSTNAME_S LOGGER_TEXT NHC_PID

# Users should only override these settings.
NAME=${0/#*\/}
CONFDIR="/etc/$NAME"
CONFFILE="$CONFDIR/$NAME.conf"
INCDIR="$CONFDIR/scripts"
HELPERDIR="$LIBEXECDIR/$NAME"
ONLINE_NODE="$HELPERDIR/node-mark-online"
OFFLINE_NODE="$HELPERDIR/node-mark-offline"
LOGFILE=">>/var/log/$NAME.log"
DEBUG=0
SILENT=0
MARK_OFFLINE=1
TIMEOUT=5
MAX_SYS_UID=99
export NAME CONFDIR CONFFILE INCDIR HELPERDIR ONLINE_NODE OFFLINE_NODE LOGFILE DEBUG SILENT TIMEOUT MAX_SYS_UID

### Script guts begin here.

# Load settings from system-wide location.
if [[ -f $SYSCONFIGDIR/$NAME ]]; then
    . $SYSCONFIGDIR/$NAME
fi

# Check for config file before we do too much work.
if [[ ! -f "$CONFFILE" ]]; then
    # Missing config means no checks.  No checks means no failures.
    exit 0
fi

log "Node Health Check starting."

# Load all include scripts.
dbg "Loading scripts from $INCDIR..."
for SCRIPT in $INCDIR/* ; do
    dbg "Loading ${SCRIPT/#*\/}"
    . $SCRIPT
done

# Set ALARM to timeout script.
if [[ $TIMEOUT -gt 0 ]]; then
    (sleep $TIMEOUT ; kill -ALRM -$NHC_PID ; sleep 1 ; kill -TERM -$NHC_PID) &
    WATCHDOG_PID=$!
    export WATCHDOG_PID
    dbg "Watchdog PID is $WATCHDOG_PID, NHC PID is $NHC_PID"
else
    dbg "No watchdog, NHC PID is $NHC_PID"
fi

CHECKS=( )
nhc_load_conf $CONFFILE
for ((CNUM=0; CNUM<${#CHECKS[*]}; CNUM++)); do
    CHECK="${CHECKS[$CNUM]}"

    # Run the check.
    log "Running check:  \"$CHECK\""
    eval $CHECK
    RET=$?

    # Check for failure.
    if [[ $RET -ne 0 ]]; then
        log "Node Health Check failed.  Check $CHECK returned $RET"
        die $RET "Check $CHECK returned $RET"
    fi
done

if [[ "$MARK_OFFLINE" = "1" ]]; then
    eval '$ONLINE_NODE "$HOSTNAME" </dev/null >/dev/null' $LOGFILE '2>&1 &'
fi

syslog_flush
log "Node Health Check completed successfully (${SECONDS}s${BASH_SUBSHELL:+, $BASH_SUBSHELL subshells})."
[[ $WATCHDOG_PID -gt 0 ]] && kill -9 $WATCHDOG_PID
exit 0
